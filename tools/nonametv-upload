#!/usr/bin/perl

use FindBin;
use lib "$FindBin::Bin/../lib";

use Getopt::Long;

use NonameTV::Job qw/StartJob EndJob/;
use NonameTV::Log qw/SetVerbosity d p w f/;
use NonameTV::Config qw/ReadConfig/;

my $opt = { verbose      => 0,
	  };


my $res = GetOptions( $opt, qw/verbose+/ );

SetVerbosity( $opt->{verbose}, 0 );

foreach my $server (@ARGV) {
  StartJob( "Upload", $server, 10 );

  my $conf = ReadConfig();
  my $sc = $conf->{Upload}->{$server};

  p "Updating.";

  if( $sc->{Type} eq "rsync" ) {
    RsyncUpload( $sc );
  }
  else {
    f "Unknown upload type $sc->{Type}";
  }
  
  EndJob();
}

sub RsyncUpload {
  my( $sc ) = @_;

  my $server = $sc->{Server};
#  my $connected = qx/ssh $server -o ConnectTimeout=5 'echo -n Connected' 2>&1/;
#  if( $connected ne "Connected" ) {
#    error( "Failed to connect to $server: $connected" );
#    return;
#  }

  foreach my $local (keys %{$sc->{Paths}}) {
    my $remote = $sc->{Paths}->{$local};
    my $command = "rsync -rsh=ssh $verbose --delete $local $server:$remote";
    d "$command";
    # Capture STDERR and let STDOUT come out on STDERR. From perldoc perlop
    my $res = qx/$command 3>&1 1>&2 2>&3 3>&-/;
    if( $? > 0 ) {
      f "Failed to upload $local: $res";
      return;
    }
  }
}
