#!/usr/bin/perl -w

use strict;

use NonameTV;
use NonameTV::DataStore;
use NonameTV::Config qw/ReadConfig/;

use HTTP::Cache::Transparent;

if( scalar( @ARGV ) != 2 )
{
  print << 'EODOC';
nonametv-import-download <importer> <batch-id>

Download the data for a batch and put it in the "new"-section in the
override directory as batchid.org.

The override directory is currently hardcoded as 

var/local/nonametv/override

To override the input for a batch:

nonametv-import-download TV4 plus.tv4.se_2004-11-10
cd /var/local/nonametv/override/new
cp plus.tv4.se_2004-11-10.org plus.tv4.se_2004-11-10
emacs plus.tv4.se_2004-11-10
nonametv-import TV4

The plus.tv4.se_2004-11-10 will be moved from new/ to data/ 
by nonametv-import. The .org-file will never be touched or processed.

To update an override, do the same as for a new override.

To remove an override, move the file in data/ to delete/. This forces
the importer to process data from the original site.

EODOC

exit 1;
}

# Read configuration
my $conf = ReadConfig();

# Create Datastore
my $ds = NonameTV::DataStore->new( $conf->{DataStore} );

# Initialize cache
HTTP::Cache::Transparent::init( $conf->{Cache} );

my( $imp_name, $batch_id ) = @ARGV;

# Create the right importer
my $imp_data = $conf->{Importers}->{$imp_name};
my $imp_type = $imp_data->{Type};

my $imp = eval "use NonameTV::Importer::$imp_type; 
                NonameTV::Importer::${imp_type}->new( \$imp_data );"
        or die $@;

my( $xmltvid ) = ($batch_id =~ /(.*)_/); 

my $data = $ds->sa->Lookup( 'channels', { xmltvid => $xmltvid } );

my $file = "/var/local/nonametv/override/new/$batch_id.org";

open OUT, "> $file" or die "Failed to write to $file";
print OUT $imp->FetchDataFromSite( $batch_id, $data );
close OUT;
