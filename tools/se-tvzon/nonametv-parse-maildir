#!/usr/bin/perl -w

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Mail::Box;
use Mail::Box::Manager;

use File::Temp qw/tempdir/;
use File::Copy qw/move copy/;
use File::Basename;

use Getopt::Long;
use Digest::MD5;
use Data::Dumper;

use Encode qw/decode/;

use NonameTV;
use NonameTV::DataStore;
use NonameTV::Factory qw/CreateFileStore CreateDataStore/;
use NonameTV::Log qw/d p w f SetVerbosity StartLogSection EndLogSection/;

my $opt = { manual => 0,
            test => 0,
	    verbose => 0,
	    quiet => 0,
            };

my $res = GetOptions( $opt, qw/manual test verbose/ );

$opt->{verbose} = 1 if $opt->{manual};

SetVerbosity( $opt->{verbose}, $opt->{quiet} );

if( not $res ) {
  print << 'EOHELP';
 [--manual] [--test] [--verbose]

Extract files from mails in a maildir and store them using 
NonameTV::FileStore.

  --manual  Ask the user which Importer to use if the information
            cannot be derived from the message. 

  --test    Run the importer in test-mode.

EOHELP

  exit 1;
}

my $ds = CreateDataStore();

my $root = "/home/jnylen/maildir/.Projects/";
my @folders = qw(NonameTV-Data.Disney
		 NonameTV-Data.Turner
		 NonameTV-Data.GlobalListings
		 NonameTV-Data.France24
		 NonameTV-Data.CNBC
		 NonameTV-Data.OUTTV
		 NonameTV-Data.FuelTV
		 NonameTV-Data.LuxeTV
		 NonameTV-Data.GodTV
		 NonameTV-Data.TVChile
		 NonameTV-Data.TravelChannel
		 NonameTV-Data.FOX
		 NonameTV-Data.Kanal10
		 NonameTV-Data.SBSTV
		 NonameTV-Data.TV5Monde
		 NonameTV-Data.Motors
		 NonameTV-Data.Svt
		 NonameTV-Data.OKGoteborg
		 NonameTV-Data.LifestyleTV
		 NonameTV-Data.Gmail
		 NonameTV-Data.Playboy
		 NonameTV-Data.Hustler
		 NonameTV-Data.Chellozone
		 NonameTV-Data.YaS
		 NonameTV-Data.ESPN
		 NonameTV-Data.MTV
		 NonameTV-Data.Mezzo
		 NonameTV-Data.HighTV
		 NonameTV-Data.BBC
		 NonameTV-Data.EBS
		 NonameTV-Data.WildTV
		 NonameTV-Data.Euronews
                 );

# Flag messages AFTER they have been processed. Then I normally
# only have to move the message to the correct folder.

my $tmpdir = tempdir( CLEANUP => 1 );

my $mgr = Mail::Box::Manager->new;

StartLogSection( "nonametv-parse-maildir", 0 );

foreach my $dir (@folders) {
  my $folder = $mgr->open( "$root.$dir", 
                           access => 'rw',
                           extract => 'ALWAYS' );

  foreach my $message ($folder->messages) {
    next if $message->isDeleted();
    next if $message->label( 'flagged' );
    next unless $message->isMultipart;

    # Use Encode::MIME::Header
    my $subject = decode( 'MIME-Header', $message->get( 'Subject' ) ) || '';
    my $from = $message->get( 'From' );

    d "Processing $from - $subject";

    if( process_parts( $message, $dir, $from, $subject ) ) {
      $message->label( 'flagged' => 1 );
      d "Processing succeeded.";
    }
    else {
      d "Processing failed.";
    }
  }
}

$mgr->closeAllFolders;

EndLogSection( "nonametv-parse-maildir" );
 
sub process_parts
{
  my( $part, $dir, $from, $subject ) = @_;

  my $type = $part->get('Content-Type');
#  return 0 if $type eq "text/plain";

  if($part->isMultipart)
  {
    my $count = 0;
    foreach my $child ($part->parts)
    {
      $count += process_parts( $child, $dir, $from, $subject );
    }
    return $count;
  }
  else
  {
    my $disp = $part->body->disposition;
    my $name = decode( 'MIME-Header', 
		       $part->body->dispositionFilename ) || 'noname';
    my $size = $part->body->size;

    my $channel = guess_channel( $dir, $from, $subject, $name, $type, $size );

    if( (not defined $channel) and $opt->{manual} )
    {
      print "$name ($size bytes): ";
      $channel = <STDIN>;
      $channel =~ tr/\n\r //d;
      $channel = undef if $channel eq "";        
    }

    if( not defined $channel ) {
      d "$name skipped.";
      return 0;
    }

    my $chd = $ds->sa->Lookup( 'channels', {xmltvid => $channel} );

    die "Unknown channel $channel" if not defined $chd;
    
    p "Adding file $name for $channel";

    my $fs = GetFileStore( $chd->{grabber} );

    my $content = $part->decoded->string;
    #print Dumper($content);
    $fs->AddFile( $channel, $name, \$content );
  }

  return $opt->{test} ? 0 : 1;
}

sub guess_channel
{
  my( $dir, $from, $subject, $filename, $type, $size ) = @_;

  if( $dir =~ /Disney/ ) {
    # The Disney filenames are very unreliable. 
    if( $filename =~ /\bxd/i ) {
      return "xd.disneychannel.se";
    }
    if( $filename =~ /\bdxd/i ) {
      return "xd.disneychannel.se";
    }
    elsif( $filename =~ /playhouse/i ) {
      return "junior.disney.se";
    }
    elsif( $filename =~ /junior/i ) {
      return "junior.disney.se";
    }
    elsif( $filename =~ /disney\s*channel/i ) {
      return "disneychannel.se";
    }
    elsif( $filename eq "noname" ) {
      return undef;
    }
    elsif( $subject =~ /playhouse/i ) {
      return "junior.disney.se";
    }
    elsif( $subject =~ /junior/i ) {
      return "junior.disney.se";
    }
    elsif( $subject =~ /disney\s*channel/i ) {
      return "disneychannel.se";
    }

    return undef;
  }

  if( $dir =~ /SBSTV/ ) {
  	# Kanal 5
  	if( $subject =~ /kanal 5/i ) {
          return "kanal5.se";
    }
    elsif( $subject =~ /kanal5/i ) {
          return "kanal5.se";
    }
    # Kanal 9
    elsif( $subject =~ /kanal 9/i ) {
          return "kanal9.se";
    }
    elsif( $subject =~ /kanal9/i ) {
          return "kanal9.se";
    }
    # TV 11 (taken over from TV4 from 1st June)
    elsif( $subject =~ /tv 11/i ) {
          return "tv11.sbstv.se";
    }
    elsif( $subject =~ /tv11/i ) {
    	  return "tv11.sbstv.se";
    }
    elsif( $subject =~ /kanal 11/i ) {
          return "tv11.sbstv.se";
    }
    elsif( $subject =~ /kanal11/i ) {
          return "tv11.sbstv.se";
    }


  }

   if( $dir =~ /GlobalListings/ ) {
     return "hd.natgeo.se" if $filename =~ /^ng\s*swe\s*hd\b/i;
     return "natgeo.se" if $filename =~ /^ng\s*swe\b/i;
	# Nat geo wild sends in XLS format
     return "wild.natgeo.se" if $filename =~ /^ngwscan\s*\b/i;
	# History Channel
     return "historytv.se" if $filename =~ /his.eur.swe/i;
     #return "hd.historytv.se" if $filename =~ /his.hd.swe/i;
	# ESPN Classic
    # return "classic.espn.com" if $filename =~ /^espn\s+classic\s+europe/i;
	# Travel Channel
     return "travelchanneltv.se" if $filename =~ /^travel/i;
 }

   if( $dir =~ /Turner/ ) {
    # Word files
	return "cartoonnetwork.se" if $filename =~ /^cn\s*nordic\s+\(swe\)\s*\b/i;
	return "boomerangtv.se" if $filename =~ /^boomerang\s*nordic\s*\(swe\)\s*\b/i;
	
	# Excel (XLS)
	if( $filename =~ /\.xls$/i ) {
		return "tcmeurope.com" if $filename =~ /tcm\s+nordic/i;
		return "cnn.com" if $filename =~ /cnn\s*\(in\s+cet\)/i;
	}
  }
 
 if( $dir =~ /Chellozone/ and $filename =~ /\.xls$/i ) {
     return "outdoorchannel.com" if $filename =~ /^UTEM\d*L\d*\b/i;
 }
 
   if( $dir =~ /Kanal10/ and $filename =~ /\.doc$/i ) {
     return "kanal10.se";
 }
   if( $dir =~ /OKGoteborg/ and $filename =~ /\.xls$/i ) {
     return "oppnakanalengoteborg.se";
 }
   if( $dir =~ /France24/ and $filename =~ /\.zip$/i ) {
     return "france24.com" if $filename =~ /ANGL/i;
 }

   if( $dir =~ /TV5Monde/ and $filename =~ /\.xls$/i ) {
     return "tv5monde.org";
 }
   if( $dir =~ /OUTTV/ and $filename =~ /\.xlsx$/i ) {
     return "outtv.se";
 }

 if( $dir =~ /Euronews/ and $filename =~ /\.xlsx$/i ) {
      return "euronews.com";
 }

 if( $dir =~ /Gmail/ and $filename =~ /\.xls$/i ) {
     return "privatespice.com" if $filename =~ /^private/i;
 }
 
 if( $dir =~ /Playboy/ and $filename =~ /\.doc$/i ) {
     return "europe.playboytv.com" if $filename =~ /^playboy/i;
     return "adultchannel.co.uk" if $filename =~ /^the\s*adult/i;
     return "privatespice.com" if $filename =~ /^private/i;
     return "viasat.spice.com" if $filename =~ /^spice\s*viasat/i;
 }
 
 if( $dir =~ /Hustler/ and $filename =~ /\.xls$/i ) {
     return "europe.bluehustler.com" if $filename =~ /^blue.*gmt.*\b/i;
     return "europe.hustlertv.com" if $filename =~ /^hustler.*gmt.*\b/i;
 }
 
 if( $dir =~ /MTV/ ) {
 	# excel (XLS)
 	if($filename =~ /\.xls$/i) {
    	
    }
    
    # excel (XLSX)
    if($filename =~ /\.xlsx$/i) {
    	return "classic.vh1.se" if $filename =~ /vh1.*euro.*classic/i;
    }
 }

   if( $dir =~ /YaS/ and $filename =~ /\.xls$/i ) {
     return "nauticalchannel.net" if $filename =~ /nc/i;
 }

 if( $dir =~ /Motors/ and $filename =~ /\.xls$/i ) {
     return "motorstv.com" if $filename =~ /pgms/i and $filename !~ /french/i;
 }

 if( $dir =~ /TravelChannel/ and $filename =~ /\.xls$/i ) {
     return "travelchanneltv.se" if $filename =~ /^epg\s*\b/i;
 }

 if( $dir =~ /PokerChannel/ and $filename =~ /\.xls$/i ) {
     return "pokerchanneleurope.com";
 }
 
 if( $dir =~ /LifestyleTV/ and $filename =~ /\.xls|.xlsx$/i ) {
     return "lifestyletv.se";
 }
 
 if( $dir =~ /TVChile/ and $filename =~ /\.xls|.xlsx$/i ) {
     return "tvchile.cl";
 }
 
 if( $dir =~ /FuelTV/ and $filename =~ /epg/i ) {
     return "fuel.tv";
 }
 
 if( $dir =~ /GodTV/ and $filename =~ /\.xls$/i ) {
     return "god.tv";
 }
 
 if( $dir =~ /LuxeTV/ and $filename =~ /\.xls$/i ) {
     return "luxe.tv" if $filename =~ /\d\.xls$/i;
 }
 
 if( $dir =~ /ESPN/ and $filename =~ /\.xls$/i ) {
     #return "america.espn.com" if $filename =~ /cet/i;
 }
 
 if( $dir =~ /Mezzo/ and $filename =~ /\.xls$/i ) {
     return "mezzo.tv" if $filename !~ /hd/i; # dont import mezzo live hd channel
 }
 
 if( $dir =~ /HighTV/ and $filename =~ /\.xls$/i ) {
     return "hightv.tv" if $filename =~ /epg/i;
 }
 
 if( $dir =~ /Svt/ and $filename =~ /\.xml$/i ) {
     return "svt1.svt.se" if $filename =~ /svt1/i; 				# SVT_SCHEDULE_SVT1_20130311_20130425.xml
     return "svt2.svt.se" if $filename =~ /svt2/i; 				# SVT_SCHEDULE_SVT2_20130311_20130425.xml
     return "svtb.svt.se" if $filename =~ /svtb/i; 				# SVT_SCHEDULE_SVTB_20130311_20130425.xml
     return "kunskapskanalen.svt.se" if $filename =~ /svtk/i;   # SVT_SCHEDULE_SVTK_20130311_20130425.xml
     return "svtworld.svt.se" if $filename =~ /svte/i; 			# SVT_SCHEDULE_SVTE_20130311_20130425.xml
     return "svt24.svt.se" if $filename =~ /_24_/i; 			# SVT_SCHEDULE_24_20130311_20130425.xml
 }

 if( $dir =~ /BBC/ and $filename =~ /\.xls$/i ) {
     return "bbcentertainment.com" if $filename =~ /entertainment/i;
     return "bbchd.com" if $filename =~ /hd/i;
     return "bbcknowledge.com" if $filename =~ /knowledge/i;
     return "bbclifestyle.com" if $filename =~ /lifestyle/i;
 }

 if( $dir =~ /EBS/ and $filename =~ /\.xls$/i ) {
     return "bbcentertainment.com" if $filename =~ /entertainment\s+scandi/i;
     return "bbchd.com" if $filename =~ /hd\s+scandi/i;
     return "bbcknowledge.com" if $filename =~ /knowledge\s+scandi/i;
     return "bbclifestyle.com" if $filename =~ /lifestyle\s+scandi/i;
 }

 if( $dir =~ /WildTV/ and $filename =~ /\.xml/i ) {
 	return "wildtv.ca";
 }


  return undef;
}

my $filestores = {};

sub GetFileStore {
  my( $importer ) = @_;

  if( not defined $filestores->{$importer} ) {
    $filestores->{$importer} = CreateFileStore( $importer );
  }

  return $filestores->{$importer}
}

sub md5sum {
  my( $file ) = @_;
  open(FILE, $file) or die "Can't open '$file': $!";
  binmode(FILE);
  
  return Digest::MD5->new->addfile(*FILE)->hexdigest;
}
