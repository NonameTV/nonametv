#!/usr/bin/perl -w

use strict;

use FindBin;
use lib "$FindBin::Bin/../lib";

use DateTime;

use NonameTV;
use NonameTV::DataStore;
use NonameTV::Config qw/ReadConfig/;

use Getopt::Long;

my $opt = { 'verbose' => 0,
            'all' => 0,
            'xmltvid' => "",
            'warndays' => "",
          };

my $res = GetOptions( $opt, qw/verbose all xmltvid=s warndays=s/ );

if( not $opt->{xmltvid} and not $opt->{all} )
{
  print << 'EOHELP';
nonametv-lastshow --xmltvid <xmltvid>

  --xmltvid <xmltvid>
    Find the last program for the channel specified

  --all
    Find the last program for all channels

  --warndays <days>
    Warn if the last show found is in less than <days> specified

  --verbose
    Be verbose

EOHELP

  exit 1;
}

my( $xmltvid ) = $opt->{xmltvid};
my( $warndays ) = $opt->{warndays};

# Read configuration
my $conf = ReadConfig();

my $ds = NonameTV::DataStore->new( $conf->{DataStore} );

if( $xmltvid ){
  my $channel_id = $ds->{sa}->Lookup( 'channels', { xmltvid => $xmltvid }, 'id' );
  if( not $channel_id ){
    print "Invalid xmltvid $xmltvid\n";
    exit;
  }
  my $lastshow = LastShow( $channel_id );
  if( $lastshow ){
    print "Last show for $xmltvid starts at $lastshow\n";
  }
}

if( $opt->{all} ){

  print "Channels with last show in less then $warndays days:\n";
  my $chdb = $ds->{sa}->LookupMany( 'channels', { export => 1 } , [ 'xmltvid' ] );
  foreach my $ch (@{$chdb}) {
    my $lastshow = LastShow( $ch->{id} );
    if( $lastshow ){
      if( isToWarn( $lastshow, $warndays ) ){
        print "Last show for $ch->{xmltvid} starts at $lastshow\n";
      }
    } else {
      print "No shows found for $ch->{xmltvid}\n";
    }
  }
}

exit;

sub LastShow {
  my( $channel_id ) = @_;

  my $sql = "SELECT MAX(start_time) FROM programs WHERE channel_id=$channel_id";

  my( $res, $lastprog ) = $ds->sa->Sql( $sql );

  my $value = $lastprog->fetchrow_array;
  $lastprog->finish();

  if ( not defined($value) ) {
    return undef;
  }

  return $value;
}

sub isToWarn {
  my( $lastshow , $warndays ) = @_;

  my( $year, $month, $day, $hour, $min, $sec ) = ( $lastshow =~ /^(\d+)\-(\d+)\-(\d+)\s+(\d+)\:(\d+)\:(\d+)$/ );

  my $ldt = DateTime->new( year   => $year,
                            month  => $month,
                            day    => $day,
                            hour   => $hour,
                            minute => $min,
                            second => $sec,
                            nanosecond => 0,
                            time_zone => 'Europe/Zagreb',
    );

  my $checktime = DateTime->now->add( days => $warndays );

  my $cmp = DateTime->compare( $checktime, $ldt );

  return 1 if( $cmp gt 0 );

  return 0;
}
