#!/usr/bin/perl -w

use strict;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Mail::Box;
use Mail::Box::Manager;

use File::Temp qw/tempdir/;
use File::Copy qw/move copy/;
use File::Basename;

use Getopt::Long;
use Digest::MD5;

use Encode qw/decode/;

use NonameTV;
use NonameTV::DataStore;
use NonameTV::Factory qw/CreateFileStore CreateDataStore/;
use NonameTV::Log qw/d p w f SetVerbosity StartLogSection EndLogSection/;

my $opt = { manual => 0,
            test => 0,
	    verbose => 0,
	    quiet => 0,
            };

my $res = GetOptions( $opt, qw/manual test verbose/ );

$opt->{verbose} = 1 if $opt->{manual};

SetVerbosity( $opt->{verbose}, $opt->{quiet} );

if( not $res ) {
  print << 'EOHELP';
 [--manual] [--test] [--verbose]

Extract files from mails in a maildir and store them using 
NonameTV::FileStore.

  --manual  Ask the user which Importer to use if the information
            cannot be derived from the message. 

  --test    Run the importer in test-mode.

EOHELP

  exit 1;
}

my $ds = CreateDataStore();

my $root = "/home/beatx/maildir/.Projects/";
my @folders = qw(NonameTV-Data.Disney
		 NonameTV-Data.GlobalListings
		 NonameTV-Data.ESPN
		 NonameTV-Data.CNBC
		 NonameTV-Data.Nonstop
		 NonameTV-Data.OUTTV
		 NonameTV-Data.YaS
		 NonameTV-Data.ExtremeSports
		 NonameTV-Data.TravelChannel
		 NonameTV-Data.FOX
                 );

# Flag messages AFTER they have been processed. Then I normally
# only have to move the message to the correct folder.

my $tmpdir = tempdir( CLEANUP => 1 );

my $mgr = Mail::Box::Manager->new;

StartLogSection( "nonametv-parse-maildir", 0 );

foreach my $dir (@folders) {
  my $folder = $mgr->open( "$root.$dir", 
                           access => 'rw',
                           extract => 'ALWAYS' );

  foreach my $message ($folder->messages) {
    next if $message->isDeleted();
    next if $message->label( 'flagged' );
    next unless $message->isMultipart;

    # Use Encode::MIME::Header
    my $subject = decode( 'MIME-Header', $message->get( 'Subject' ) ) || '';
    my $from = $message->get( 'From' );

    d "Processing $from - $subject";

    if( process_parts( $message, $dir, $from, $subject ) ) {
      $message->label( 'flagged' => 1 );
      d "Processing succeeded.";
    }
    else {
      d "Processing failed.";
    }
  }
}

$mgr->closeAllFolders;

EndLogSection( "nonametv-parse-maildir" );
 
sub process_parts
{
  my( $part, $dir, $from, $subject ) = @_;

  my $type = $part->get('Content-Type');
#  return 0 if $type eq "text/plain";

  if($part->isMultipart)
  {
    my $count = 0;
    foreach my $child ($part->parts)
    {
      $count += process_parts( $child, $dir, $from, $subject );
    }
    return $count;
  }
  else
  {
    my $disp = $part->body->disposition;
    my $name = decode( 'MIME-Header', 
		       $part->body->dispositionFilename ) || 'noname';
    my $size = $part->body->size;

    my $channel = guess_channel( $dir, $from, $subject, $name, $type, $size );

    if( (not defined $channel) and $opt->{manual} )
    {
      print "$name ($size bytes): ";
      $channel = <STDIN>;
      $channel =~ tr/\n\r //d;
      $channel = undef if $channel eq "";        
    }

    if( not defined $channel ) {
      d "$name skipped.";
      return 0;
    }

    my $chd = $ds->sa->Lookup( 'channels', {xmltvid => $channel} );

    die "Unknown channel $channel" if not defined $chd;
    
    p "Adding file $name for $channel";

    my $fs = GetFileStore( $chd->{grabber} );

    my $content = $part->decoded->string;
    $fs->AddFile( $channel, $name, \$content );
  }

  return $opt->{test} ? 0 : 1;
}

sub guess_channel
{
  my( $dir, $from, $subject, $filename, $type, $size ) = @_;

  if( $dir =~ /Disney/ ) {
    # The Disney filenames are very unreliable. 
    if( $filename =~ /\bxd/i ) {
      return "xd.disneychannel.tv.tvzon.se";
    }
    if( $filename =~ /\bdxd/i ) {
      return "xd.disneychannel.tv.tvzon.se";
    }
    elsif( $filename =~ /playhouse/i ) {
      return "playhouse.disneychannel.tv.tvzon.se";
    }
    elsif( $filename =~ /disney\s*channel/i ) {
      return "disneychannel.tv.tvzon.se";
    }
    elsif( $filename eq "noname" ) {
      return undef;
    }
    elsif( $subject =~ /toon\s*disney/i ) {
      return "toon.disneychannel.tv.tvzon.se";
    }
    elsif( $subject =~ /playhouse/i ) {
      return "playhouse.disneychannel.tv.tvzon.se";
    }
    elsif( $subject =~ /disney\s*channel/i ) {
      return "disneychannel.tv.tvzon.se";
    }

    return undef;
  }

   if( $dir =~ /GlobalListings/ ) {
     return "nationalgeographichd.tv.tvzon.se" if $filename =~ /^ng\s*swe\s*hd\b/i;
     return "nationalgeographic.tv.tvzon.se" if $filename =~ /^ng\s*swe\b/i;
	# Nat geo wild sends in XLS format
     return "natgeowild.tv.tvzon.se" if $filename =~ /^ngwscan\s*\b/i;
	# History Channel
     return "history.tv.tvzon.se" if $filename =~ /^his.sd.swe\s*\b/i;
     return "historyhd.tv.tvzon.se" if $filename =~ /^his.hd.swe\s*\b/i;
	# ESPN Classic
     return "espnclassic.tv.tvzon.se" if $filename =~ /^espn.eur.eng\s*\b/i;
 }

   if( $dir =~ /Turner/ and $filename =~ /\.xls$/i ) {
     return "cartoonnetwork.tv.tvzon.se" if $filename =~ /^cn\s*nordic\s*\b/i;
     return "boomerangtv.tv.tvzon.se" if $filename =~ /^boomerang\s*nordic\s*\b/i;
     return "tcm.tv.tvzon.se" if $filename =~ /^tcm\s*nordic\s*\b/i;
     return "cnn.tv.tvzon.se" if $filename =~ /^cnn\s*\b/i;
  }

#   if( $dir =~ /Nonstop/ and $filename =~ /\.doc$/i ) {
#     return "showtime.nonstop.tv" if $filename =~ /^showtime\s*\b/i;
#  }

   if( $dir =~ /CNBC/ and $filename =~ /\.xls$/i ) {
     return "cnbc.tv.tvzon.se" if $filename =~ /^\s*\b/i;
 }

   if( $dir =~ /ExtremeSports/ and $filename =~ /\.xls$/i ) {
     return "extremesports.tv.tvzon.se" if $filename =~ /^\s*\b/i;
 }

   if( $dir =~ /OUTTV/ and $filename =~ /\.xls$/i ) {
     return "outtv.tv.tvzon.se" if $filename =~ /^outtv\s*\b/i;
 }

   if( $dir =~ /YaS/ and $filename =~ /\.xls$/i ) {
     return "yachtandsail.tv.tvzon.se" if $filename =~ /^palinsesto\s*\b/i;
 }

   if( $dir =~ /FOX/ and $filename =~ /\.xls$/i ) {
     return "natgeowildhd.tv.tvzon.se" if $filename =~ /^schedule\s*\b/i;
 }

   if( $dir =~ /TravelChannel/ and $filename =~ /\.xls$/i ) {
     return "travelchannel.tv.tvzon.se" if $filename =~ /^epg\s*\b/i;
 }

#   if( $dir =~ /NATGEOWILD/ and $filename =~ /\.xls$/i ) {
#     return "wild.ngcsverige.com" if $filename =~ /^ngwscan\s*\b/i;
# }


#   if( $dir =~ /HistoryChannel/ and $filename =~ /\.doc$/i ) {
#     return "scand.history.com" if $filename =~ /^his.sd.swe\s*\b/i;
#     return "hdscand.history.com" if $filename =~ /^his.hd.swe\s*\b/i;
# }

#   if( $dir =~ /ESPN/ and $filename =~ /\.xls$/i ) {
#     return "america.espn.com" if $filename =~ /^espnamerica\s*\b/i;
# }

   if( $dir =~ /PokerChannel/ and $filename =~ /\.xls$/i ) {
     return "pokerchannel.tv.tvzon.se" if $filename =~ /^g\s*\b/i;
 }

  return undef;
}

my $filestores = {};

sub GetFileStore {
  my( $importer ) = @_;

  if( not defined $filestores->{$importer} ) {
    $filestores->{$importer} = CreateFileStore( $importer );
  }

  return $filestores->{$importer}
}

sub md5sum {
  my( $file ) = @_;
  open(FILE, $file) or die "Can't open '$file': $!";
  binmode(FILE);
  
  return Digest::MD5->new->addfile(*FILE)->hexdigest;
}
