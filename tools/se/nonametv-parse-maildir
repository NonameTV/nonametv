#!/usr/bin/perl -w

use strict;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Mail::Box;
use Mail::Box::Manager;

use File::Temp qw/tempdir/;
use File::Copy qw/move/;
use File::Basename;

use Getopt::Long;
use Digest::MD5;

use Encode qw/decode/;

use NonameTV;
use NonameTV::DataStore;
use NonameTV::Config qw/ReadConfig/;

my $opt = { manual => 0,
            test => 0,
	    verbose => 0,
            };

my $res = GetOptions( $opt, qw/manual test verbose/ );

$opt->{verbose} = 1 if $opt->{manual};

if( not $res ) {
  print << 'EOHELP';
nonametv-process-maildir [--manual] [--test] [--verbose]

Extract files from mails in a maildir and store them in one directory per
channel for later import by Importers derived from 
NonameTV::Importer:BaseFile.

  --manual  Ask the user which Importer to use if the information
            cannot be derived from the message. 

  --test    Run the importer in test-mode.

EOHELP

  exit 1;
}

my $conf = ReadConfig();

my $ds = NonameTV::DataStore->new( $conf->{DataStore} );
my $filestore = $conf->{FileStore};

my $root = "/home/mattias/Maildir/.Projects";
my @folders = qw(xmltv-data
                 NonameTV-Data.Disney
                 NonameTV-Data.Kanal9
                 NonameTV-Data.NationalGeographic
                 NonameTV-Data.KanalLokal
                 NonameTV-Data.Axess
                 );

# Flag messages AFTER they have been processed. Then I normally
# only have to move the message to the correct folder.

my $tmpdir = tempdir( CLEANUP => 1 );

my $mgr = Mail::Box::Manager->new;

foreach my $dir (@folders) {
  my $folder = $mgr->open( "$root.$dir", 
                           access => 'rw',
                           extract => 'ALWAYS' );

  foreach my $message ($folder->messages) {
    next if $message->isDeleted();
    next if $message->label( 'flagged' );
    next unless $message->isMultipart;

    # Use Encode::MIME::Header
    my $subject = decode( 'MIME-Header', $message->get( 'Subject' ) ) || '';
    my $from = $message->get( 'From' );

    verbose( "Processing $from - $subject" );

    if( process_parts( $message, $dir, $from, $subject ) ) {
      $message->label( 'flagged' => 1 );
      verbose( "Processing succeeded." );
    }
    else {
      verbose( "Processing failed." );
    }
  }
}

$mgr->closeAllFolders;
 
sub process_parts
{
  my( $part, $dir, $from, $subject ) = @_;

  my $type = $part->get('Content-Type');
  return 0 if $type eq "text/plain";

  if($part->isMultipart)
  {
    my $count = 0;
    foreach my $child ($part->parts)
    {
      $count += process_parts( $child, $dir, $from, $subject );
    }
    return $count;
  }
  else
  {
    my $disp = $part->body->disposition;
    my $name = decode( 'MIME-Header', 
		       $part->body->dispositionFilename ) || 'noname';
    my $size = $part->body->size;

    my $channel = guess_channel( $dir, $from, $subject, $name, $type, $size );

    if( (not defined $channel) and $opt->{manual} )
    {
      print "$name ($size bytes): ";
      $channel = <STDIN>;
      $channel =~ tr/\n\r //d;
      return 0 if $channel eq "";

      if( $channel eq "save" )
      {
        # a major security hole if you accept any path!
        my $filename = "/tmp/" . $name;
        
        open(FH, "> $filename");
        $part->decoded->print(\*FH);
        close(FH);

        print "Wrote $filename\n";
        return 1;
      }
        
    }

    if( not defined $channel ) {
      verbose( "  $name skipped." );
      return 0;
    }

    my $chd = $ds->sa->Lookup( 'channels', {xmltvid => $channel} );

    die "Unknown channel $channel" if not defined $chd;

    my $dir = "$filestore/$channel";

    if( not -d $dir ) {
      print "\nNo such directory $dir\n";
      return 0;
    }

#    print "  $importer $name $type " . $part->size . "\n";
    
    # a major security hole if you accept any path!
    my $filename = "$tmpdir/" . $name;
  
    open(FH, "> $filename");
    $part->decoded->print(\*FH);
    close(FH);

    my $md5 = md5sum( $filename );
    my $oldmd5 = $ds->sa->Lookup( 'files', { channelid => $chd->{id},
                                         filename => $name }, 'md5sum' );

    # Check if the file exists even though there was no record in the db.
    # This is the case if the importer has not been run since the file
    # was placed there.
    if( not defined( $oldmd5 ) and -f "$dir/$name" ) {
      $oldmd5 = md5sum( "$dir/$name" );
    }

    if( (not defined $oldmd5) or ($md5 ne $oldmd5) ) {
      $ds->sa->Delete( 'files', { channelid => $chd->{id},
                              filename => $name } );
      move( $filename, "$dir/$name" );
      sleep(1); # File-times have a one-second resolution...
      verbose( "  $name $channel" ); 
    }
    else {
      verbose( "  $name $channel (duplicate)" );
      unlink( $filename );
    }
  }

  return $opt->{test} ? 0 : 1;
}

sub guess_channel
{
  my( $dir, $from, $subject, $filename, $type, $size ) = @_;

  if( $dir =~ /Expressen/ and $filename =~ /\.doc$/i ) {
    return "sport.expressen.se";
  }

  if( $dir =~ /Disney/ ) {
    if( $filename =~ /xml/i ) {
      if( $filename =~ /\btoon/i ) {
	return "toon.disneychannel.se";
      }
      elsif( $filename =~ /playhouse/i ) {
	return "playhouse.disneychannel.se";
      }
      elsif( $filename =~ /disney channel/i ) {
	return "disneychannel.se";
      }
      elsif( $subject =~ /toon disney/i ) {
	return "toon.disneychannel.se";
      }
      elsif( $subject =~ /playhouse/i ) {
	return "playhouse.disneychannel.se";
      }
      elsif( $subject =~ /disney channel/i ) {
	return "disneychannel.se";
      }

      return undef;
    }
  }

  if( $dir =~ /Aftonbladet/ ) {
    if( $type eq "application/msword" or $size > 10000 ) {
      return "tv7.aftonbladet.se";
    }
  }

  if( $dir =~ /Kanal9/ and $filename =~ /\.doc$/i ) {
    return "kanal9.se";
  }

  if( $dir =~ /NationalGeographic/ and $filename =~ /\.doc$/i ) {
    return "ngcsverige.com";
  }

  if( $dir =~ /KanalLokal/ and $filename =~ /\.xml$/i ) {
    if( $filename =~ /^1 STO/ ) {
      return "stockholm.kanallokal.se";
    }
    elsif( $filename =~ /^2 OST/ ) {
      return "ostergotland.kanallokal.se";
    }
    elsif( $filename =~ /^3 SKA/ ) {
      return "skane.kanallokal.se";
    }
    elsif( $filename =~ /^4 GBG/ ) {
      return "goteborg.kanallokal.se";
    }
  }

  if( $dir =~ /Axess/ and $filename =~ /\.doc$/i ) {
    return "axess.se";
  }

  return undef;
}

sub md5sum {
  my( $file ) = @_;
  open(FILE, $file) or die "Can't open '$file': $!";
  binmode(FILE);
  
  return Digest::MD5->new->addfile(*FILE)->hexdigest;
}

sub error {
  print $_[0] . "\n";
}

sub verbose {
  print $_[0] . "\n" if $opt->{verbose};
}
