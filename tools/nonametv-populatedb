#!/usr/bin/perl -w

use strict;

use FindBin;
use lib "$FindBin::Bin/../lib";

use File::Slurp;

use NonameTV;
use NonameTV::DataStore;
use NonameTV::Config qw/ReadConfig/;

use Getopt::Long;
use Text::CSV_XS;

my $opt = { 
	rebuild => 0,
	};

my $res = GetOptions( $opt, qw/rebuild/ );

if( scalar( @ARGV ) != 2 )
{
  print << 'EOHELP';
nonametv-populatedb [--rebuild] <data-directory> <country>

Populate the database with base data from files. Looks for data in 
<data-directory>/ and <data-directory>/<country>/.

--rebuild   Drop all tables and create them again. Note that this will
            discard all data generated by Importers.

See also nonametv-dumpdb.

EOHELP

  exit 1;
}

my( $datadir, $country ) = @ARGV;

# Read configuration
my $conf = ReadConfig();

my $ds = NonameTV::DataStore->new( $conf->{DataStore} );

if( $opt->{rebuild} ) {
  print "Rebuilding database from $datadir/listings.sql\n";
  my $commands = read_file( "$datadir/listings.sql" )
      or die "Failed to read $datadir/listings.sql";
  
  my @commands = split( /\s*;\s*/, $commands );
  foreach my $command (@commands) {
    $ds->sa->Sql( $command );
  }
}

populate_table( $ds, "dvb_cat", "$datadir/dvb_cat.txt" );
populate_table( $ds, "languagestrings", "$datadir/languagestrings.txt" );
populate_table( $ds, "augmenterrules", "$datadir/$country/augmenterrules.txt" );
populate_table( $ds, "channels", "$datadir/$country/channels.txt" );
populate_table( $ds, "trans_cat", "$datadir/$country/trans_cat.txt" );
populate_table( $ds, "dvb_service_pointer", "$datadir/$country/dvb_service_pointer.txt" );

sub populate_table {
  my( $ds, $table, $file ) = @_;

  print "Populating table $table from file $file\n";

  $ds->sa->Delete( $table, {} );

  if( not -f $file ) {
      print "Skipping $table\n";
      return;
  }

  my $in = new IO::File( "< $file" ) or die;

  my $csv = Text::CSV_XS->new({eol=> "\n", 'binary' => 1});

  my $sth;

  while( my $row = $csv->getline($in) ) {
    last if not defined $row->[0];
    foreach (@{$row}) {
      $_=undef if $_ eq '\N';
    }

    if( not defined( $sth ) ) {
      my $params = join( ",", split( "", "?" x scalar( @{$row} ) ) );

      $sth = $ds->sa->{dbh}->prepare( "insert into $table values ($params)" )
	  or die "Prepare failed.\nError: " . $ds->{dbh}->errstr;
    }
    
    $sth->execute( @{$row} ) or die "Execute failed: " . $ds->{dbh}->errstr;
  }
  
  $sth->finish();

  $in->close();
}

